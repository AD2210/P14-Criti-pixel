name: CI
on:
  push:
    branches:
      - Ci

# Empêche les exécutions concurrentes de ce workflow sur la même ref
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  ci:
    name: CI PHP ${{ matrix.php-versions }}
    runs-on: ubuntu-latest
    strategy:
      # on ne parallélise pas, rallonge le tempd'execution mais evite les plantages
      max-parallel: 1
      matrix:
        php-versions: ['8.2', '8.3', '8.4']
    env:
      # On compose le nom de DB directement à partir des contextes autorisés
      TEST_DB_NAME: criti-pixel_test_${{ matrix.php-versions }}_${{ github.run_id }}
      PG_USER: symfony
      PG_PASS: symfony
      PG_HOST: localhost
      PG_PORT: 5432
      PG_SRV_VER: 16
      PG_CHARSET: utf8
      DATABASE_URL: postgresql://${{ env.PG_USER }}:${{ env.PG_PASS }}@${{ env.PG_HOST }}:${{ env.PG_PORT }}/criti-pixel_test_${{ matrix.php-versions }}_${{ github.run_id }}?serverVersion=${{ env.PG_SRV_VER }}&charset=${{ env.PG_CHARSET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: pdo, pdo_pgsql, intl, mbstring, json, ctype, iconv, xml, hash, sodium, curl, zip
          tools: composer, phpunit:latest, phpstan, php-cs-fixer

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Start docker services
        run: |
          docker compose -f docker-compose.yml up -d --build
          # Attendre database prête
          until docker compose exec -T database pg_isready -U symfony -d postgres; do sleep 1; done

      - name: Build assets (SASS)
        run: php bin/console sass:build --no-interaction

      - name: Prepare test database
        env:
          SYMFONY_ENV: test
        run: |
          # S'assure qu'aucune session ne bloque le drop
          PSQL="docker compose exec -T database psql -U symfony -d postgres -v ON_ERROR_STOP=1 -c"
          $PSQL "SELECT 1;"
          $PSQL "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname='${TEST_DB_NAME}' AND pid <> pg_backend_pid();"
          php bin/console doctrine:database:drop -f --if-exists --env=test || true
          php bin/console doctrine:database:create --env=test
          php bin/console doctrine:migrations:migrate -n --env=test
          php bin/console doctrine:fixtures:load -n --purge-with-truncate --env=test

      - name: Tests
        run: php bin/phpunit

      - name: Static analysis
        run: php vendor/bin/phpstan

      - name: Cleanup test database
        if: always()
        run: |
          PSQL="docker compose exec -T database psql -U symfony -d postgres -v ON_ERROR_STOP=1 -c"
          $PSQL "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname='${TEST_DB_NAME}' AND pid <> pg_backend_pid();"
          php bin/console doctrine:database:drop -f --if-exists --env=test || true